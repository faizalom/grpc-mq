// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: proto/mq.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MessageBroker_Publish_FullMethodName    = "/MessageBroker/Publish"
	MessageBroker_Subscribe_FullMethodName  = "/MessageBroker/Subscribe"
	MessageBroker_ListTopics_FullMethodName = "/MessageBroker/ListTopics"
)

// MessageBrokerClient is the client API for MessageBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageBrokerClient interface {
	Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error)
	Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error)
	ListTopics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTopicsReply, error)
}

type messageBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageBrokerClient(cc grpc.ClientConnInterface) MessageBrokerClient {
	return &messageBrokerClient{cc}
}

func (c *messageBrokerClient) Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, MessageBroker_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageBrokerClient) Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MessageBroker_ServiceDesc.Streams[0], MessageBroker_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscriptionRequest, Message]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageBroker_SubscribeClient = grpc.ServerStreamingClient[Message]

func (c *messageBrokerClient) ListTopics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTopicsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTopicsReply)
	err := c.cc.Invoke(ctx, MessageBroker_ListTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageBrokerServer is the server API for MessageBroker service.
// All implementations must embed UnimplementedMessageBrokerServer
// for forward compatibility.
type MessageBrokerServer interface {
	Publish(context.Context, *Message) (*Response, error)
	Subscribe(*SubscriptionRequest, grpc.ServerStreamingServer[Message]) error
	ListTopics(context.Context, *emptypb.Empty) (*ListTopicsReply, error)
	mustEmbedUnimplementedMessageBrokerServer()
}

// UnimplementedMessageBrokerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessageBrokerServer struct{}

func (UnimplementedMessageBrokerServer) Publish(context.Context, *Message) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedMessageBrokerServer) Subscribe(*SubscriptionRequest, grpc.ServerStreamingServer[Message]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedMessageBrokerServer) ListTopics(context.Context, *emptypb.Empty) (*ListTopicsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopics not implemented")
}
func (UnimplementedMessageBrokerServer) mustEmbedUnimplementedMessageBrokerServer() {}
func (UnimplementedMessageBrokerServer) testEmbeddedByValue()                       {}

// UnsafeMessageBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageBrokerServer will
// result in compilation errors.
type UnsafeMessageBrokerServer interface {
	mustEmbedUnimplementedMessageBrokerServer()
}

func RegisterMessageBrokerServer(s grpc.ServiceRegistrar, srv MessageBrokerServer) {
	// If the following call pancis, it indicates UnimplementedMessageBrokerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MessageBroker_ServiceDesc, srv)
}

func _MessageBroker_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageBrokerServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageBroker_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageBrokerServer).Publish(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageBroker_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageBrokerServer).Subscribe(m, &grpc.GenericServerStream[SubscriptionRequest, Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageBroker_SubscribeServer = grpc.ServerStreamingServer[Message]

func _MessageBroker_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageBrokerServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageBroker_ListTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageBrokerServer).ListTopics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageBroker_ServiceDesc is the grpc.ServiceDesc for MessageBroker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageBroker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MessageBroker",
	HandlerType: (*MessageBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _MessageBroker_Publish_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _MessageBroker_ListTopics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _MessageBroker_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/mq.proto",
}
